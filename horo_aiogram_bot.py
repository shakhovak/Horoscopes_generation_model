from aiogram import Bot, types
from aiogram import Dispatcher
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram import F
import asyncio
import logging
import json
import re
import random
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

tokenizer = AutoTokenizer.from_pretrained("horo_bot/models")
model = AutoModelForSeq2SeqLM.from_pretrained("horo_bot/models")

with open("horo_bot/config.json", "r") as f:
    json_config = json.load(f)
TOKEN = json_config["token"]

logging.basicConfig(level=logging.INFO)

bot = Bot(TOKEN)
dp = Dispatcher()

lst = [
    "‚ôà–û–≤–µ–Ω",
    "‚ôå–õ–µ–≤",
    "‚ôê–°—Ç—Ä–µ–ª–µ—Ü",
    "‚ôã–†–∞–∫",
    "‚ôè–°–∫–æ—Ä–ø–∏–æ–Ω",
    "‚ôì–†—ã–±—ã",
    "‚ôâ–¢–µ–ª–µ—Ü",
    "‚ôç–î–µ–≤–∞",
    "‚ôë–ö–æ–∑–µ—Ä–æ–≥",
    "‚ôä–ë–ª–∏–∑–Ω–µ—Ü—ã",
    "‚ôé–í–µ—Å—ã",
    "‚ôí–í–æ–¥–æ–ª–µ–π",
]

dialog = {
    "in": [
        "/hello",
        "–ø—Ä–∏–≤–µ—Ç",
        "hello",
        "hi",
        "privet",
        "hey",
        "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
        "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
    ],
    "out": ["–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ü—Ä–∏–≤–µ—Ç!", "Hi!", "–ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä–∏–≤–µ—Ç!"],
}


# start message
@dp.message(CommandStart())
async def start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
            types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
            types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
            types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
        ],
    ]

    start_menu = types.ReplyKeyboardMarkup(
        keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:"
    )

    await message.reply("–°–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:", reply_markup=start_menu)


# help message
@dp.message(Command("help"))
async def help(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
            types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
            types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
            types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
        ],
    ]

    start_menu = types.ReplyKeyboardMarkup(
        keyboard=kb, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:"
    )
    await message.reply(
        """\
                     –ü—Ä–∏–≤–µ—Ç, –µ—â–µ —Ä–∞–∑ üòâ!
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞. –ù–∞–ø–æ–º–∏–Ω–∞—é:\n\
- —Å—Ç–∏—Ö–∏—è –û–≥–Ω—è: ‚ôà–û–≤–µ–Ω, ‚ôå–õ–µ–≤, ‚ôê–°—Ç—Ä–µ–ª–µ—Ü\n\
- —Å—Ç–∏—Ö–∏—è –í–æ–¥—ã: ‚ôã–†–∞–∫, ‚ôè–°–∫–æ—Ä–ø–∏–æ–Ω, ‚ôì–†—ã–±—ã\n\
- —Å—Ç–∏—Ö–∏—è –ó–µ–º–ª–∏: ‚ôâ–¢–µ–ª–µ—Ü, ‚ôç–î–µ–≤–∞, ‚ôë–ö–æ–∑–µ—Ä–æ–≥\n\
- —Å—Ç–∏—Ö–∏—è –í–æ–∑–¥—É—Ö–∞: ‚ôä–ë–ª–∏–∑–Ω–µ—Ü—ã', ‚ôé–í–µ—Å—ã, ‚ôí–í–æ–¥–æ–ª–µ–π""",
        reply_markup=start_menu,
    )


# any other text message
@dp.message(F.text)
async def handle_text(message: types.Message):
    if message.text == "üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è":
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text="‚ôà–û–≤–µ–Ω"),
            types.KeyboardButton(text="‚ôå–õ–µ–≤"),
            types.KeyboardButton(text="‚ôê–°—Ç—Ä–µ–ª–µ—Ü"),
        )
        builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.reply(
            "–î–ª—è –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –ó–æ–¥–∏–∞–∫–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )

    elif message.text == "üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã":
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text="‚ôã–†–∞–∫"),
            types.KeyboardButton(text="‚ôè–°–∫–æ—Ä–ø–∏–æ–Ω"),
            types.KeyboardButton(text="‚ôì–†—ã–±—ã"),
        )
        builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.reply(
            "–î–ª—è –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –ó–æ–¥–∏–∞–∫–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )

    elif message.text == "üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏":
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text="‚ôâ–¢–µ–ª–µ—Ü"),
            types.KeyboardButton(text="‚ôç–î–µ–≤–∞"),
            types.KeyboardButton(text="‚ôë–ö–æ–∑–µ—Ä–æ–≥"),
        )
        builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.reply(
            "–î–ª—è –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –ó–æ–¥–∏–∞–∫–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )

    elif message.text == "üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞":
        builder = ReplyKeyboardBuilder()
        builder.row(
            types.KeyboardButton(text="‚ôä–ë–ª–∏–∑–Ω–µ—Ü—ã"),
            types.KeyboardButton(text="‚ôé–í–µ—Å—ã"),
            types.KeyboardButton(text="‚ôí–í–æ–¥–æ–ª–µ–π"),
        )
        builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.reply(
            "–î–ª—è –∫–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –ó–æ–¥–∏–∞–∫–∞ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=builder.as_markup(resize_keyboard=True),
        )

    elif message.text == "–ù–∞–∑–∞–¥":
        kb = [
            [
                types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
                types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
                types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
                types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
            ],
        ]

        start_menu = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:",
        )
        await message.reply("–°–ø–µ—Ä–≤–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:", reply_markup=start_menu)

    elif any(x in message.text for x in lst):
        await message.answer(
            "{0.first_name}!\n–°–µ–∫—É–Ω–¥—É, üëÄ—Å–º–æ—Ç—Ä—é –Ω–∞ –∑–≤–µ–∑–¥—ã...".format(message.from_user),
            reply_markup=types.ReplyKeyboardRemove(),
        )
        input_ids = tokenizer.encode(message.text, return_tensors="pt")
        sample_output = model.generate(
            input_ids,
            do_sample=True,
            max_length=210,
            top_p=0.7,
            temperature=0.6,
            top_k=0,
            no_repeat_ngram_size=2,
            eos_token_id=tokenizer.eos_token_id,
        )

        out = tokenizer.decode(sample_output[0][1:], skip_special_tokens=True)
        out = re.sub(re.compile("[^–∞-—è–ê-–Ø–Å—ë !.,:?;-]"), "", out)
        symbols = [
            "..",
            ",.",
            "?.",
            " , ",
            " . ",
            " : ",
            ".:",
            ":.",
            "??",
            "?!",
            ".?",
            "? .",
            "? .",
            " .",
            ",,",
            "::",
            "  ",
            ".–∏",
            ".–∏–ª–∏",
            ".!",
            ".,",
        ]
        for symb in symbols:
            out = out.replace(symb, "")
        for symb in symbols:
            out = out.replace(symb, "")
        for symb in symbols:
            out = out.replace(symb, "")
        if "</s>" in out:
            out = out[: out.find("</s>")].strip()
        kb = [
            [
                types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
                types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
                types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
                types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
            ],
        ]

        start_menu = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:",
        )
        await message.answer(
            f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ {message.text}:\n\n{out}", reply_markup=start_menu
        )

    elif any(x in message.text.lower() for x in dialog["in"]):
        kb = [
            [
                types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
                types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
                types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
                types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
            ],
        ]

        start_menu = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:",
        )
        await message.answer(random.choice(dialog["out"]), reply_markup=start_menu)
    else:
        kb = [
            [
                types.KeyboardButton(text="üî•–ó–Ω–∞–∫–∏ –û–≥–Ω—è"),
                types.KeyboardButton(text="üíß–ó–Ω–∞–∫–∏ –í–æ–¥—ã"),
                types.KeyboardButton(text="üåç–ó–Ω–∞–∫–∏ –ó–µ–º–ª–∏"),
                types.KeyboardButton(text="üéà–ó–Ω–∞–∫–∏ –í–æ–∑–¥—É—Ö–∞"),
            ],
        ]

        start_menu = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é:",
        )
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—ÅüòÖ.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞üòâ!!!",
            reply_markup=start_menu,
        )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
